@model Coe.UI.Models.DataTableModel
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.WebUtilities

@{
    var tableClasses =
        "table table-sm table-striped table-hover table-bordered mb-0 " +
        (Model.Center ? "text-center " : "");
}

@functions {
    // Helper to render arbitrary data-* attributes safely from the model
    string DataAttrs(System.Collections.Generic.IDictionary<string, string>? data, string? method = null)
    {
        if (data is null && string.IsNullOrWhiteSpace(method)) return "";
        var sb = new System.Text.StringBuilder();
        if (data != null)
        {
            foreach (var kv in data)
            {
                sb.Append(' ')
                  .Append(HtmlEncoder.Default.Encode(kv.Key))
                  .Append("=\"")
                  .Append(HtmlEncoder.Default.Encode(kv.Value))
                  .Append('"');
            }
        }
        if (!string.IsNullOrWhiteSpace(method))
        {
            sb.Append(" data-method=\"")
              .Append(HtmlEncoder.Default.Encode(method))
              .Append('"');
        }
        return sb.ToString();
    }

    string BuildPageUrl(int p)
    {
        var req = ViewContext.HttpContext.Request;
        var dict = req.Query.ToDictionary(k => k.Key, v => v.Value.ToString());
        var qkey = Model.Pager?.QueryParam ?? "page";
        dict[qkey] = p.ToString();
        return QueryHelpers.AddQueryString(req.Path, dict);
    }
}

<div class="card shadow-sm">
    @if (!string.IsNullOrWhiteSpace(Model.Title) || Model.HeaderAction != null)
    {
        <div class="card-header d-flex justify-content-between align-items-center">
            <div class="fw-semibold">@Model.Title</div>
            @if (Model.HeaderAction != null)
            {
                <a class="@Model.HeaderAction.Class" href="@Model.HeaderAction.Href">
                    @if (!string.IsNullOrWhiteSpace(Model.HeaderAction.IconClass))
                    {
                        <i class="@Model.HeaderAction.IconClass me-1"></i>
                    }
                    @Model.HeaderAction.Text
                </a>
            }
        </div>
    }

    <div class="card-body p-0">
        <div class="table-responsive">
            <table class="@tableClasses">
                <thead>
                    <tr>
                        @foreach (var col in Model.Columns)
                        {
                            <th style="@(col.WidthStyle ?? "")" class="@(col.AlignClass ?? "")">@col.Header</th>
                        }
                        @if (Model.Rows.Any(r => r.Actions?.Count > 0))
                        {
                            <th style="width:160px;"></th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var row in Model.Rows)
                    {
                        <tr>
                            @foreach (var col in Model.Columns)
                            {
                                row.Cells.TryGetValue(col.Key, out var val);
                                <td class="@(col.AlignClass ?? "")">@Html.Raw(val ?? "")</td>
                            }

                            @if (row.Actions?.Count > 0)
                            {
                                <td class="text-end text-nowrap">
                                    @foreach (var a in row.Actions)
                                    {
                                        if (a.Type == Coe.UI.Models.DataTableActionType.Link && !string.IsNullOrWhiteSpace(a.Href))
                                        {
                                            <a class="@a.Class"
                                               href="@a.Href"
                                               @Html.Raw(DataAttrs(a.DataAttributes, a.Method))>
                                                @a.Text
                                            </a>
                                        }
                                        else if (a.Type == Coe.UI.Models.DataTableActionType.Post && !string.IsNullOrWhiteSpace(a.FormAction))
                                        {
                                            <form method="post" action="@a.FormAction" class="d-inline">
                                                @Html.AntiForgeryToken()
                                                @if (a.Hidden != null)
                                                {
                                                    foreach (var kv in a.Hidden)
                                                    {
                                                        <input type="hidden" name="@kv.Key" value="@kv.Value" />
                                                    }
                                                }
                                                <button type="button"
                                                        class="@a.Class"
                                                        data-coe-post
                                                        data-coe-confirm-title="@a.ConfirmTitle"
                                                        data-coe-confirm-body="@a.ConfirmBody"
                                                        data-coe-confirm-class="@(a.ConfirmClass ?? "btn-danger")">
                                                    @a.Text
                                                </button>
                                            </form>
                                        }
                                    }
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    @* Pager *@
    @if (Model.Pager is not null && Model.Pager.TotalItems > 0)
    {
        var p = Math.Max(1, Model.Pager.Page);
        var size = Math.Max(1, Model.Pager.PageSize);
        var total = Model.Pager.TotalItems;
        var totalPages = Math.Max(1, (int)Math.Ceiling(total / (double)size));
        var from = Math.Min(total, ((p - 1) * size) + 1);
        var to = Math.Min(total, p * size);

        <div class="d-flex justify-content-between align-items-center px-2 py-2">
            <small class="text-muted">Showing @from–@to of @total</small>
            <nav aria-label="Table pagination">
                <ul class="pagination pagination-sm mb-0">
                    <li class="page-item @(p == 1 ? "disabled" : "")">
                        <a class="page-link" href="@(p == 1 ? "#" : BuildPageUrl(1))">First</a>
                    </li>
                    <li class="page-item @(p == 1 ? "disabled" : "")">
                        <a class="page-link" href="@(p == 1 ? "#" : BuildPageUrl(p - 1))">Prev</a>
                    </li>
                    @{
                        var start = Math.Max(1, p - 2);
                        var end = Math.Min(totalPages, p + 2);
                        for (var i = start; i <= end; i++)
                        {
                            <li class="page-item @(i == p ? "active" : "")">
                                <a class="page-link" href="@(i == p ? "#" : BuildPageUrl(i))">@i</a>
                            </li>
                        }
                    }
                    <li class="page-item @(p == totalPages ? "disabled" : "")">
                        <a class="page-link" href="@(p == totalPages ? "#" : BuildPageUrl(p + 1))">Next</a>
                    </li>
                    <li class="page-item @(p == totalPages ? "disabled" : "")">
                        <a class="page-link" href="@(p == totalPages ? "#" : BuildPageUrl(totalPages))">Last</a>
                    </li>
                </ul>
            </nav>
        </div>
    }
</div>
