@model Coe.UI.Models.FormModel
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<div class="text-danger" data-coe-val-summary>
    @if (Model.Errors is { Count: > 0 })
    {
        <ul class="mb-0">
            @foreach (var e in Model.Errors)
            {
                <li>@e</li>
            }
        </ul>
    }
</div>

<form id="@Model.Id"
      action="@Model.Action"
      method="@Model.Method?.ToUpperInvariant()"
      enctype="@Model.Enctype"
      data-coe-ajax="@(Model.UseAjax ? "true" : null)"
      class="vstack gap-2">

    @* Antiforgery for POST *@
    @if (Model.Antiforgery && string.Equals(Model.Method, "post", System.StringComparison.OrdinalIgnoreCase))
    {
        @Html.AntiForgeryToken()
    }

    <div class="text-danger" data-coe-val-summary></div>

    @foreach (var f in Model.Fields)
    {
        if (f.Type == Coe.UI.Models.FormFieldType.Hidden)
        {
            <input type="hidden" name="@f.Name" value="@f.Value" />
            continue;
        }

        <div class="mb-3">
            @if (!string.IsNullOrWhiteSpace(f.Label))
            {
                <label class="form-label" for="@f.Name">@f.Label</label>
            }

            @switch (f.Type)
            {
                case Coe.UI.Models.FormFieldType.TextArea:
                    <textarea class="form-control"
                  id="@f.Name" name="@f.Name"
                  rows="@f.TextAreaRows"
                  placeholder="@f.Placeholder"
                  minlength="@(f.MinLength?.ToString())"
                  maxlength="@(f.MaxLength?.ToString())"
                  pattern="@f.Pattern"
                  required="@(f.Required ? "required" : null)">@f.Value</textarea>
                    break;

                case Coe.UI.Models.FormFieldType.Password:
                case Coe.UI.Models.FormFieldType.Email:
                case Coe.UI.Models.FormFieldType.Number:
                case Coe.UI.Models.FormFieldType.Date:
                case Coe.UI.Models.FormFieldType.DateTime:
                case Coe.UI.Models.FormFieldType.Text:
                    var type = f.Type switch
                    {
                        Coe.UI.Models.FormFieldType.Password => "password",
                        Coe.UI.Models.FormFieldType.Email => "email",
                        Coe.UI.Models.FormFieldType.Number => "number",
                        Coe.UI.Models.FormFieldType.Date => "date",
                        Coe.UI.Models.FormFieldType.DateTime => "datetime-local",
                        _ => "text"
                    };
                    <input class="form-control"
                           id="@f.Name" name="@f.Name"
                           type="@type"
                           value="@f.Value"
                           placeholder="@f.Placeholder"
                           minlength="@(f.MinLength?.ToString())"
                           maxlength="@(f.MaxLength?.ToString())"
                           pattern="@f.Pattern"
                           step="@f.Step"
                           min="@f.Min" max="@f.Max"
                           required="@(f.Required ? "required" : null)" />
                    break;

                case Coe.UI.Models.FormFieldType.Select:
                    <select class="form-select"
                            id="@f.Name" name="@f.Name"
                            required="@(f.Required ? "required" : null)"
                            data-coe-source="@f.DataSourceUrl"
                            data-coe-depends="@f.DependsOn">
                        @if (f.Options != null)
                        {
                            foreach (var o in f.Options)
                            {
                                <option value="@o.Value" selected="@(o.Selected ? "selected" : null)">@o.Text</option>
                            }
                        }
                    </select>
                    break;

                case Coe.UI.Models.FormFieldType.MultiSelect:
                    <select class="form-select"
                            id="@f.Name" name="@f.Name"
                            multiple="multiple"
                            required="@(f.Required ? "required" : null)"
                            data-coe-source="@f.DataSourceUrl"
                            data-coe-depends="@f.DependsOn">
                        @if (f.Options != null)
                        {
                            foreach (var o in f.Options)
                            {
                                <option value="@o.Value" selected="@(o.Selected ? "selected" : null)">@o.Text</option>
                            }
                        }
                    </select>
                    break;

                case Coe.UI.Models.FormFieldType.Checkbox:
                    <div class="form-check">
                        <input class="form-check-input"
                               type="checkbox"
                               id="@f.Name" name="@f.Name" value="true"
                               checked="@(string.Equals(f.Value, "true", System.StringComparison.OrdinalIgnoreCase) ? "checked" : null)" />
                        <label class="form-check-label" for="@f.Name">@f.Label</label>
                    </div>
                    break;

                case Coe.UI.Models.FormFieldType.Radio:
                    if (f.Options != null)
                    {
                        foreach (var o in f.Options)
                        {
                            var rid = $"{f.Name}_{o.Value}";
                            <div class="form-check">
                                <input class="form-check-input"
                                       type="radio"
                                       id="@rid" name="@f.Name" value="@o.Value"
                                       checked="@(o.Selected ? "checked" : null)" />
                                <label class="form-check-label" for="@rid">@o.Text</label>
                            </div>
                        }
                    }
                    break;
            }

            @if (!string.IsNullOrWhiteSpace(f.Help))
            {
                <div class="form-text">@f.Help</div>
            }
        </div>
    }

    <div class="d-flex gap-2">
        @foreach (var b in Model.Buttons)
        {
            switch (b.Kind)
            {
                case Coe.UI.Models.FormButtonKind.Submit:
                    <button type="submit" class="@b.Class">@b.Text</button>
                    break;
                case Coe.UI.Models.FormButtonKind.Reset:
                    <button type="reset" class="@b.Class">@b.Text</button>
                    break;
                case Coe.UI.Models.FormButtonKind.Link when !string.IsNullOrWhiteSpace(b.Href):
                    <a href="@b.Href" class="@b.Class">@b.Text</a>
                    break;
                case Coe.UI.Models.FormButtonKind.Back:
                    <button type="button" class="@b.Class" onclick="history.back()">@b.Text</button>
                    break;
            }
        }
    </div>
</form>
