@model IEnumerable<AlertPortal.Web.ViewModels.CustomerVm>
@using Coe.UI.Models
@{
    ViewData["Title"] = "Customers";

    var page = int.TryParse(Context.Request.Query["page"], out var qp) ? Math.Max(1, qp) : 1;
    var pageSize = ViewBag.PageSize is int ps ? ps : 10;
    var total = ViewBag.Total is int t ? t : Model.Count();

    var table = new DataTableModel
    {
        Title = "Customers",
        HeaderAction = new DataTableHeaderAction
        {
            Text = "New Customer",
            Href = Url.Action("Create", "Customers"),
            Class = "btn btn-primary",
            IconClass = "bi bi-plus" // optional
        },
        Pager = new DataTablePagination
        {
            Page = page,
            PageSize = pageSize,
            TotalItems = total,
            QueryParam = "page"
        },
        Columns =
        {
            new DataTableColumn { Header = "Id",   Key = "id",   WidthStyle = "80px" },
            new DataTableColumn { Header = "Name", Key = "name", AlignClass = "text-start" }
        }
    };

    foreach (var c in Model)
    {
        table.Rows.Add(new DataTableRow
        {
            Cells = new Dictionary<string, string>
            {
                ["id"] = c.Id.ToString(),
                ["name"] = HtmlEncoder.Encode(c.Name)
            },
            Actions = new List<DataTableAction>
            {
                new DataTableAction
                {
                    Type = DataTableActionType.Link,
                    Text = "Edit",
                    Class = "btn btn-outline-secondary btn-sm",
                    Href = Url.Action("Edit","Customers", new { id = c.Id })
                },
                new DataTableAction
                {
                    Type = DataTableActionType.Link,
                    Text = "Delete",
                    Class = "btn btn-outline-danger btn-sm",
                    Href = Url.Action("Delete","Customers", new { id = c.Id }),
                    Method = "POST",
                    DataAttributes = new Dictionary<string,string>
                    {
                        ["data-coe-delete"] = "true",
                        ["data-name"] = c.Name,
                        ["data-coe-confirm-title"] = "Delete customer",
                        ["data-coe-confirm-body"]  = "This cannot be undone.",
                        ["data-coe-confirm-class"] = "btn-danger"
                    }
                }
            }
        });
    }
}

@await Component.InvokeAsync("DataTable", table)

@section Scripts {
    @if (TempData["Toast.Success"] is string ok)
    {
        <script>showToast({ title: 'Success', body: @Json.Serialize(ok), variant: 'success' });</script>
    }
    @if (TempData["Toast.Warning"] is string warn)
    {
        <script>showToast({ title: 'Notice', body: @Json.Serialize(warn), variant: 'warning' });</script>
    }
    @if (TempData["Toast.Error"] is string err)
    {
        <script>showToast({ title: 'Error', body: @Json.Serialize(err), variant: 'danger' });</script>
    }
}
